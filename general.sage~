import sage.symbolic.ring.SymbolicRing

t,u = var('t,u')

class DASEP:
    def __init__(self,lattice,notype,noparticles):
        self.n = n
        self.p = notype
        self.q = noparticles

    def system(self):
        eqt = []
        vrb = []
        ab = q
        while ab < p*q:
            for par in Partitions(ab,length=self.q,max_part=self.p):
                par = par+[0]*(n-q)
                for word in Permutations_mset(par):
                    state = State(self,word)
                    eqt.append(state.balance())
                    vrb.append(state)
            ab += 1
        return eqt,vrb

class State(symbol):
    def __init__(self,dasep,word):
        super().__init__(var(word))
        self.dasep = dasep

    def outdegree(self):
        s = 0
        i = -1
        while i < len(self):
            if self[i] > self[i+1]:
                s += t
            if self[i] < self[i+1]:
                s += 1
            if self[i] > 0 and self[i] < self.dasep.p:
                s += u
            if self[i] > 1:
                s += 1
            i += 1
        return s*self

    def indegree(self):
        s = 0
        i = -1
        while i < len(self):
            if self[i] < self[i+1]:
                if i != -1:
                    s += t*State([0,i]+self[i+1]+self[i]+self[i+2:])
                else:
                    s += t*State(self[-1]+self[1:-1]+self[0])
            if self [i] > self[i+1]:
                if i != -1:
                    s += State([0,i]+self[i+1]+self[i]+self[i+2:])
                else:
                    s += State(self[-1]+self[1:-1]+self[0])
            if self[i] > 0 and self[i] < self.dasep.p:
                s += State(self[0:i]+str(int(self[i])+1)+self[i+1:])
            if self[i] > 1:
                s += u*State(self[0:i]+str(int(self[i])-1)+self[i+1:])
            i += 1
        return s

    def balance(self):
        return [self.outdegree() == self.indegree()]
    
